from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel
from typing_extensions import Literal


class RoleType(Enum):
    SYSTEM = "system"
    USER = "user"
    ASSISTANT = "assistant"
    TOOL = "tool"
    KNOWLEDGE = "knowledge"


class CriticCategory(Enum):
    POSITIVE = 1
    INCONFIDENCE = 0
    NEGATIVE = -1


class DataType(Enum):
    """function call中，参数支持的数据类型
    包括整数、字符串、小数、布尔值、列表、字典
    """

    INTEGER: str = "integer"
    STRING: str = "string"
    NUMBER: str = "number"
    BOOLEAN: str = "boolean"
    ARRAY: str = "array"
    OBJECT: str = "object"


class ToolProperty(BaseModel):
    """定义工具时，参数的定义"""

    type: DataType  # 参数类别
    description: Optional[str] = None  # 参数描述
    enum: Optional[List] = None  # 枚举类时才有值
    items: Optional[ToolProperty] = None  # type == array时，items才有值
    # type == object时，properties才有值
    properties: Optional[Dict[str, ToolProperty]] = None
    required: Optional[List[str]] = None  # type == object时，required才有值


class FunctionDefinition(BaseModel):
    """
    ADC Function definition, a custom version of the OpenAI Function definition.
openai-python/src/openai/types/shared/function_definition.py at main · openai/openai-python
    """

    name: str
    """The name of the function to be called.

    Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length
    of 64.
    """
    description: Optional[str] = None
    """
    A description of what the function does, used by the model to choose when and
    how to call the function.
    """
    parameters: ToolProperty  # Optional[FunctionParameters] = None
    """The parameters the functions accepts, described as a JSON Schema object.

    See the
    [guide](https://platform.openai.com/docs/guides/text-generation/function-calling)
    for examples, and the
    [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for
    documentation about the format.

    Omitting `parameters` defines a function with an empty parameter list.
    """


class Tool(BaseModel):
    type: Literal["function"]
    function: FunctionDefinition


class Function(BaseModel):
    arguments: str
    """
    The arguments to call the function with, as generated by the model in JSON
    format. Note that the model does not always generate valid JSON, and may
    hallucinate parameters not defined by your function schema. Validate the
    arguments in your code before calling your function.
    """

    name: str
    """The name of the function to call."""


class ToolCall(BaseModel):
    id: str
    """The ID of the tool call."""

    type: Literal["function"]="function"
    """The type of the tool. Currently, only `function` is supported."""

    function: Function
    """The function that the model called."""


class Message(BaseModel):
    role: RoleType
    content: Optional[str] = None
    tool_calls: Optional[List[ToolCall]] = None  # 可选，在role=assistant时可选
    # 可选，在role=tool时才有，必须与之前某个Message中的ToolCall中的id相同
    tool_call_id: Optional[str] = None


class DebugInfo(BaseModel):
    info: Dict[str, Any]